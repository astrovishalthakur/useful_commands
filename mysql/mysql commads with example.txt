#####ALL code is available on mikedane.com or girraffeacademy mysql course.
go to url:      https://www.mikedane.com/databases/sql/more-basic-queries/

Use semicolon after sql commands;


# Creating the sql table
CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(20),
    major VARCHAR(20)
);


#or
# Creating the sql table
CREATE TABLE student (
    student_id INT,
    name VARCHAR(20),
    major VARCHAR(20),
    PRIMARY KEY(student_id)
);


# Describing the table
DESCRIBE student;

# Deleting a row in a table
DELETE FROM branch_supplier WHERE branch_id = 3;


# Deleting the table all together.
DROP TABLE student;


# Adding new column "gpa" to the table.
ALTER TABLE student ADD gpa DECIMAL(3, 2);

# Dropping the column.
ALTER TABLE student DROP COLUMN gpa;


# Inserting data in table.
INSERT INTO student VALUES(1, 'Vishal', 'Biology');


# Getting all information from table.
SELECT * FROM student;


# If we don't know the value of a column, we can do something like this
# major will be stored as NULL
INSERT INTO student(student_id, name) VALUES(3, 'Kushal');


# we can specify if we want a column to be unique and not null
# here name is can't be null and major has to be unique.
CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(20) NOT NULL,
    major VARCHAR(20) UNIQUE
);


# Providing Default values to columns.
# Here undecided is the value we will set as default, it could be anything.
CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(20),
    major VARCHAR(20) DEFAULT 'undecided'
);


# If we want student_id to auto increment
CREATE TABLE student (
    student_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(20),
    major VARCHAR(20) DEFAULT('undecided')
);

# Student_id will auto increment.
INSERT INTO student(name, major) VALUES('Vishal', 'Computer Science');
INSERT INTO student(name, major) VALUES('Tarun', 'Electrical');
INSERT INTO student(name, major) VALUES('Kartik', 'Civil');


# To delete a entry from table
DELETE FROM student
WHERE student_id = 5;


# Comparision operators in sql
= :equals
<> :not equals
> :greater than
<: less than
>= :greater than equals
>= :less than eaquals

# Logical op
OR : for "logical OR"
AND : "logical AND"

# Updating the entry based on condition
# This will change entry of every 'Electrical' to 'Electronics'
UPDATE student
SET major = 'Electronics'
WHERE major = 'Electrical';

# Or
# Updating the entry based on condition
# This will change entry of student with student_id 1 to 'Electronics'
UPDATE student
SET major = 'Electronics'
WHERE student_id = 1;

# Or we can set multiple things together
UPDATE student
SET name = 'Mike', major = 'Arts'
WHERE student_id = 1;

# Some other useful commands
SELECT name, major
FROM student;

SELECT name, major
FROM student
ORDER BY name DESC;


SELECT name, major
FROM student
ORDER BY major, student_id;

# only gives two entries back
SELECT *
FROM student
LIMIT 2;

# IN command works kind of like python in
# Will give every entry having name in the given tuple
SELECT *
FROM student
WHERE name IN ('Sonia', 'Jyoti', 'Vishal');


--Find forename and sirname of all employees
SELECT first_name AS Forename, last_name AS Surname
FROM employee;

--Find all the different genders
SELECT DISTINCT sex
FROM employee;


--Find the number of employees
--COUNT is a sql function.
SELECT COUNT(emp_id)
FROM employee;


--Find the number of female employees born after 1970
SELECT COUNT(emp_id)
FROM employee
WHERE sex = "F" AND birth_day > "1971-01-01";

--Find the average of all employee's salary
SELECT AVG(salary)
FROM employee;


# UNIONS in sql

-- Find a list of employee and branch names
SELECT employee.first_name AS Employee_Branch_Names
FROM employee
UNION
SELECT branch.branch_name
FROM branch;

-- Find a list of all clients & branch suppliers' names
SELECT client.client_name AS Non-Employee_Entities, client.branch_id AS Branch_ID
FROM client
UNION
SELECT branch_supplier.supplier_name, branch_supplier.branch_id
FROM branch_supplier;


# join in sql

-- Add the extra branch
INSERT INTO branch VALUES(4, "Buffalo", NULL, NULL);

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
JOIN branch    -- LEFT JOIN, RIGHT JOIN
ON employee.emp_id = branch.mgr_id;




# wildcards (They are like python regular expressions)

-- % = any # characters, _ = one character

-- Find any client's who are an LLC
SELECT *
FROM client
WHERE client_name LIKE '%LLC';

-- Find any branch suppliers who are in the label business
SELECT *
FROM branch_supplier
WHERE supplier_name LIKE '% Label%';

-- Find any employee born on the 10th day of the month
SELECT *
FROM employee
WHERE birth_day LIKE '_____10%';

-- Find any clients who are schools
SELECT *
FROM client
WHERE client_name LIKE '%Highschool%';




